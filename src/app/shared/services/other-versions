game.service.ts


import { Injectable } from '@angular/core';
import {Http, Headers, RequestOptions, Response, URLSearchParams} from "@angular/http";
import {AuthenticationService} from "./authentication.service";
import {Observable} from "rxjs";
import {Game} from "../models/game";
import {ShipService} from "./ship.service";
import {Ship} from "../models/ship";
@Injectable()
export class GameService {
  private apiUrl: string;
  constructor(private http: Http,
              private authenticationService: AuthenticationService,
              private shipService: ShipService,
  ) {
    //TODO fill in your heroku-backend URL
    //this.apiUrl = 'https://sopra-fs17-group13.herokuapp.com';
    this.apiUrl = 'http://localhost:8080'
  }
  getGames(): Observable<Game[]> {
    // add authorization header with token
    let headers = new Headers({'Authorization': 'Bearer ' + this.authenticationService.token});
    let options = new RequestOptions({headers: headers});
    // get users from api
    return this.http.get(this.apiUrl + '/game', options)
      .map((response: Response) => {
        return response.json()});
  }
  getShips(): Observable<Ship[]> {
    let ships:Ship[] = [];
    let jsonFile =  `{
           "size" : 2,
           "id" : 32,
           "dockPosition" : 1,
           "minStones" : false,
           "imageURL" : false,
           "slots": [
            {
                "id": "1",
                "hasStone": "false"
            },
            {
                "id": "2",
                "hasStone": "true"
            }
                    ]
           }`;
    let mockShip1 = JSON.parse(jsonFile);
   // let mockShip2 = this.parse(jsonFile);
    ships.push(mockShip1);
    return Observable.of(ships);
  }
  setShipToDockingStation(ship:Ship){
    return this.http.post(this.apiUrl + '/game/{id}`/ships', ship) // ...using post request
      .map((response: Response) => {
        // login successful if there's a jwt token in the response
        let ships = response//.json() && response.json();
        if (ships) {
          console.log(ships)
        } else {
          // return false to indicate failed login
          return null;
        }
      }) // ...and calling .json() on the response to return data
      .catch((error: any) => Observable.throw(error.json().error || 'Server error')); //...errors if
  }
  parse(jsonStr: string):Ship {
    let jsonObj: any = JSON.parse(jsonStr);
    for (let prop in jsonObj) {
      this[prop] = jsonObj[prop];
    }
    return jsonObj;
  }
  addGameService(numPlayers): Observable<Game> {
    let bodyString = JSON.stringify({numPlayers: numPlayers}); // Stringify payload
    let headers = new Headers({
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ' + this.authenticationService.token
    });// ... Set content type to JSON
    let params = new URLSearchParams();
    params.set("token", this.authenticationService.token);
    let options = new RequestOptions({headers: headers, search: params}); // Create a request option
    return this.http.post(this.apiUrl + '/game', bodyString, options) // ...using post request
      .map((response: Response) => {
        // login successful if there's a jwt token in the response
        let game = response//.json() && response.json();
        if (game) {
          console.log(game)
        } else {
          // return false to indicate failed login
          return null;
        }
      }) // ...and calling .json() on the response to return data
      .catch((error: any) => Observable.throw(error.json().error || 'Server error')); //...errors if
  }
  leaveGameService(gameId): Observable<Game> {
    let bodyString = JSON.stringify({}); // Stringify payload
    let headers = new Headers({
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ' + this.authenticationService.token
    });// ... Set content type to JSON
    let params = new URLSearchParams();
    params.set("token", this.authenticationService.token)
    let options = new RequestOptions({headers: headers, search: params}); // Create a request option
    return this.http.post(this.apiUrl + '/game/' + gameId + '/leave', bodyString, options) // ...using post request
      .map((response: Response) => {
        // login successful if there's a jwt token in the response
        let game = response//.json() && response.json();
        if (game) {
          console.log(game)
        } else {
          // return false to indicate failed login
          return null;
        }
      }) // ...and calling .json() on the response to return data
      .catch((error: any) => Observable.throw(error.json().error || 'Server error')); //...errors if
  }
  joinGameService(gameId): Observable<Game> {
    let bodyString = JSON.stringify({}); // Stringify payload
    let headers = new Headers({
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ' + this.authenticationService.token
    });// ... Set content type to JSON
    let params = new URLSearchParams();
    params.set("token", this.authenticationService.token)
    let options = new RequestOptions({headers: headers, search: params}); // Create a request option
    return this.http.post(this.apiUrl + '/game/' + gameId + '/join', bodyString, options) // ...using post request
      .map((response: Response) => {
        // login successful if there's a jwt token in the response
        let game = response//.json() && response.json();
        if (game) {
          console.log(game)
        } else {
          // return false to indicate failed login
          return null;
        }
      }) // ...and calling .json() on the response to return data
      .catch((error: any) => Observable.throw(error.json().error || 'Server error')); //...errors if
  }
  //to implement: Observable<string[]>{...}
  getRoundCard() {
    let dummy = ["ship_1", "ship_4", "ship_3", "ship_2"]
    return  dummy;
  }
}


ship.service.ts

import { Injectable } from '@angular/core';
import {Ship} from "../models/ship";
@Injectable()
export class ShipService {
  ships:Ship[] = [];
  constructor() { }
  setShips(ships: Ship[]){
    this.ships = ships;
  }
}
